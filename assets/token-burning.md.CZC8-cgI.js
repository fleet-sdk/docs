import{_ as n,c as a,a2 as i,o as t}from"./chunks/framework.B2aOKxcB.js";const c=JSON.parse('{"title":"Burning Tokens","description":"","frontmatter":{},"headers":[],"relativePath":"token-burning.md","filePath":"token-burning.md","lastUpdated":1676920811000}'),e={name:"token-burning.md"};function o(r,s,h,p,l,k){return t(),a("div",null,s[0]||(s[0]=[i(`<h1 id="burning-tokens" tabindex="-1">Burning Tokens <a class="header-anchor" href="#burning-tokens" aria-label="Permalink to &quot;Burning Tokens&quot;">â€‹</a></h1><p>Burning tokens on Ergo is similar to <a href="./transaction-building#step-4-2-mint-a-token">minting</a>. Minting occurs whenever a new token is added to a transaction&#39;s output. Burning occurs when a transaction has fewer outputs than inputs for one or more tokens. Most transactions have outputs and inputs that are equal.</p><p>To protect against accidently burning tokens, Fleet checks to make sure inputs and outputs are equal. To burn tokens, the <code>TransactionBuilder.BurnToken()</code> method is used to declare the <code>Token ID</code> and <code>amount</code> to burn.</p><p>The <code>BurnToken</code> method accepts a single object or an array of objects describing which and how many tokens to burn.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TransactionBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(creationHeight)</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">burnTokens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tokenId: sigUSDTokenId, </span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amount: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // the amount of tokens you want to burn</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendChangeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(changeAddress)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>If a manual approach is needed, burning can be explicitly allowed through a configuration option: <code>TransactionBuilder.configure(x =&gt; x.allowTokenBurning(true))</code>.</p>`,6)]))}const u=n(e,[["render",o]]);export{c as __pageData,u as default};
