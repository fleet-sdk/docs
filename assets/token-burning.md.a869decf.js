import{_ as n,c as s,o as a,V as o}from"./chunks/framework.12b367d6.js";const y=JSON.parse('{"title":"Burning Tokens","description":"","frontmatter":{},"headers":[],"relativePath":"token-burning.md","lastUpdated":1676920811000}'),e={name:"token-burning.md"},t=o(`<h1 id="burning-tokens" tabindex="-1">Burning Tokens <a class="header-anchor" href="#burning-tokens" aria-label="Permalink to &quot;Burning Tokens&quot;">â€‹</a></h1><p>Burning tokens on Ergo is similar to <a href="./transaction-building#step-4-2-mint-a-token">minting</a>. Minting occurs whenever a new token is added to a transaction&#39;s output. Burning occurs when a transaction has fewer outputs than inputs for one or more tokens. Most transactions have outputs and inputs that are equal.</p><p>To protect against accidently burning tokens, Fleet checks to make sure inputs and outputs are equal. To burn tokens, the <code>TransactionBuilder.BurnToken()</code> method is used to declare the <code>Token ID</code> and <code>amount</code> to burn.</p><p>The <code>BurnToken</code> method accepts a single object or an array of objects describing which and how many tokens to burn.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TransactionBuilder</span><span style="color:#A6ACCD;">(creationHeight)</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">burnTokens</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">tokenId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> sigUSDTokenId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">amount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// the amount of tokens you want to burn </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(inputs)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendChangeTo</span><span style="color:#A6ACCD;">(changeAddress)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>If a manual approach is needed, burning can be explicitly allowed through a configuration option: <code>TransactionBuilder.configure(x =&gt; x.allowTokenBurning(true))</code>.</p>`,6),l=[t];function p(r,c,i,u,d,A){return a(),s("div",null,l)}const C=n(e,[["render",p]]);export{y as __pageData,C as default};
